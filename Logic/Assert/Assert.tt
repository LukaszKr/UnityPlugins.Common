<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	string name = "Test";
	int genericCount = 4;

	Func<int, string> generateMessage = (int argCount) => {
		string str = "";
		if(argCount == 0)
		{
			return "message";
		}
		str = "string.Format(message";
		for(int x = 0; x < argCount; ++x)
		{
			str += $", arg{x}";
		}
		str += ")";
		return str;
	};

	Func<string, int, bool, string> listVars = (string format, int count, bool startWithComa) => {
		string str = "";
		for(int x = 0; x < count; x++)
		{
			if(x > 0 || startWithComa) 
			{
				str += ", ";
			}
			str += string.Format(format, x.ToString());
		}
		return str;
	};

	Func<int, string> listGenerics = (int count) => {
		if(count > 0)
		{
			return "<"+listVars("T{0}", count, false)+">";
		}
		return "";
	}; 

	Func<int, string> listParams = (int count) => {
		return listVars("T{0} arg{0}", count, true);
	};
#>
namespace ProceduralLevel.Common.Logic
{
	public static class <#=name #>Assert
	{
		private const float APPROX = 0.00001f;

		#region IsTrue
		<# for(int x = 0; x < genericCount; ++x) { #>

		public static void IsTrue<#= listGenerics(x) #>(bool condition, string message<#= listParams(x) #>)
		{
			if(!condition)
			{
				throw new AssertException($"[IsTrue, {<#=generateMessage(x)#>}]");
			}
		}
		<# } #>

		#endregion

		#region IsFalse
		<# for(int x = 0; x < genericCount; ++x) { #>

		public static void IsFalse<#= listGenerics(x) #>(bool condition, string message<#= listParams(x) #>)
		{
			if(condition)
			{
				throw new AssertException($"[IsFalse, {<#=generateMessage(x)#>}]");
			}
		}
		<# } #>

		#endregion
	}
}